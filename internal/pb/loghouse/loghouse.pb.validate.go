// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/loghouse/loghouse.proto

package loghouse

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLogAsyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLogAsyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogAsyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLogAsyncRequestMultiError, or nil if none found.
func (m *CreateLogAsyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogAsyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Transport_name[int32(m.GetTransport())]; !ok {
		err := CreateLogAsyncRequestValidationError{
			field:  "Transport",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := CreateLogAsyncRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetRequestHeaders()))
		i := 0
		for key := range m.GetRequestHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRequestHeaders()[key]
			_ = val

			if utf8.RuneCountInString(key) < 1 {
				err := CreateLogAsyncRequestValidationError{
					field:  fmt.Sprintf("RequestHeaders[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) < 1 {
				err := CreateLogAsyncRequestValidationError{
					field:  fmt.Sprintf("RequestHeaders[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetResponseHeaders()))
		i := 0
		for key := range m.GetResponseHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResponseHeaders()[key]
			_ = val

			if utf8.RuneCountInString(key) < 1 {
				err := CreateLogAsyncRequestValidationError{
					field:  fmt.Sprintf("ResponseHeaders[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) < 1 {
				err := CreateLogAsyncRequestValidationError{
					field:  fmt.Sprintf("ResponseHeaders[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if utf8.RuneCountInString(m.GetRequestBody()) < 1 {
		err := CreateLogAsyncRequestValidationError{
			field:  "RequestBody",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsSuccess

	if m.TraceId != nil {
		// no validation rules for TraceId
	}

	if m.ResponseBody != nil {

		if utf8.RuneCountInString(m.GetResponseBody()) < 1 {
			err := CreateLogAsyncRequestValidationError{
				field:  "ResponseBody",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if m.ResponseStatusCode != nil {
		// no validation rules for ResponseStatusCode
	}

	if m.ResponseStatusCodeString != nil {
		// no validation rules for ResponseStatusCodeString
	}

	if m.RequestSendTime != nil {

		if t := m.GetRequestSendTime(); t != nil {
			ts, err := t.AsTime(), t.CheckValid()
			if err != nil {
				err = CreateLogAsyncRequestValidationError{
					field:  "RequestSendTime",
					reason: "value is not a valid timestamp",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {

				now := time.Now()

				if ts.Sub(now) >= 0 {
					err := CreateLogAsyncRequestValidationError{
						field:  "RequestSendTime",
						reason: "value must be less than now",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if m.ResponseSendTime != nil {

		if t := m.GetResponseSendTime(); t != nil {
			ts, err := t.AsTime(), t.CheckValid()
			if err != nil {
				err = CreateLogAsyncRequestValidationError{
					field:  "ResponseSendTime",
					reason: "value is not a valid timestamp",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {

				now := time.Now()

				if ts.Sub(now) >= 0 {
					err := CreateLogAsyncRequestValidationError{
						field:  "ResponseSendTime",
						reason: "value must be less than now",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if m.Latency != nil {

		if utf8.RuneCountInString(m.GetLatency()) < 1 {
			err := CreateLogAsyncRequestValidationError{
				field:  "Latency",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateLogAsyncRequestMultiError(errors)
	}

	return nil
}

// CreateLogAsyncRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLogAsyncRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLogAsyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogAsyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogAsyncRequestMultiError) AllErrors() []error { return m }

// CreateLogAsyncRequestValidationError is the validation error returned by
// CreateLogAsyncRequest.Validate if the designated constraints aren't met.
type CreateLogAsyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogAsyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogAsyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogAsyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogAsyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogAsyncRequestValidationError) ErrorName() string {
	return "CreateLogAsyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLogAsyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogAsyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogAsyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogAsyncRequestValidationError{}

// Validate checks the field values on CreateLogAsyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLogAsyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogAsyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLogAsyncResponseMultiError, or nil if none found.
func (m *CreateLogAsyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogAsyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateLogAsyncResponseMultiError(errors)
	}

	return nil
}

// CreateLogAsyncResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLogAsyncResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLogAsyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogAsyncResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogAsyncResponseMultiError) AllErrors() []error { return m }

// CreateLogAsyncResponseValidationError is the validation error returned by
// CreateLogAsyncResponse.Validate if the designated constraints aren't met.
type CreateLogAsyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogAsyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogAsyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogAsyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogAsyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogAsyncResponseValidationError) ErrorName() string {
	return "CreateLogAsyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLogAsyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogAsyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogAsyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogAsyncResponseValidationError{}

// Validate checks the field values on Log with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogMultiError, or nil if none found.
func (m *Log) ValidateAll() error {
	return m.validate(true)
}

func (m *Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Transport

	// no validation rules for RequestHeaders

	// no validation rules for RequestBody

	// no validation rules for ResponseBody

	if m.TraceId != nil {
		// no validation rules for TraceId
	}

	if m.RequestSendTime != nil {

		if all {
			switch v := interface{}(m.GetRequestSendTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogValidationError{
						field:  "RequestSendTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogValidationError{
						field:  "RequestSendTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestSendTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogValidationError{
					field:  "RequestSendTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ResponseSendTime != nil {

		if all {
			switch v := interface{}(m.GetResponseSendTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogValidationError{
						field:  "ResponseSendTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogValidationError{
						field:  "ResponseSendTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseSendTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogValidationError{
					field:  "ResponseSendTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Latency != nil {
		// no validation rules for Latency
	}

	if len(errors) > 0 {
		return LogMultiError(errors)
	}

	return nil
}

// LogMultiError is an error wrapping multiple validation errors returned by
// Log.ValidateAll() if the designated constraints aren't met.
type LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMultiError) AllErrors() []error { return m }

// LogValidationError is the validation error returned by Log.Validate if the
// designated constraints aren't met.
type LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogValidationError) ErrorName() string { return "LogValidationError" }

// Error satisfies the builtin error interface
func (e LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogValidationError{}

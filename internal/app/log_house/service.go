package log_house

import (
  "context"

  docs "github.com/ushakovn-org/loghouse/docs"
  desc "github.com/ushakovn-org/loghouse/internal/pb/loghouse"
  "github.com/ushakovn-org/loghouse/internal/pkg/models"

  "github.com/ushakovn/boiler/pkg/app"
)

// LogHouse сервис коллектор логов
type LogHouse struct {
  desc.UnimplementedLogHouseServer

  pool    WorkerPool
  storage Storage
}

// Storage репозиторий логов
type Storage interface {
  // CreateLogAsync асинхронно создает лог обработки запроса
  CreateLogAsync(ctx context.Context, params models.CreateLogParams) error
}

// WorkerPool пул воркеров для создания асинхронного создания логов
type WorkerPool interface {
  // Stop останавливает пул и не принимает новые задачи
  Stop()
  // Submit добавляет в пул новую задачу
  Submit(func())
}

// Config конфиг для LogHouse
type Config struct {
  Pool    WorkerPool
  Storage Storage
}

// NewLogHouse создает имплементацию LogHouse
func NewLogHouse(config Config) *LogHouse {
  return &LogHouse{
    pool:    config.Pool,
    storage: config.Storage,
  }
}

// RegisterService Code generated by Boiler; DO NOT EDIT.
func (s *LogHouse) RegisterService(params *app.RegisterParams) error {
  params.SetServiceType(app.GrpcServiceTyp)
  grpcParams := params.Grpc()
  grpcParams.SetOpenAPIDoc(docs.Swagger)
  desc.RegisterLogHouseServer(grpcParams.GrpcServiceRegistrar(), s)

  return desc.RegisterLogHouseHandlerFromEndpoint(
    params.Context(),
    grpcParams.GrpcHttpProxyServeMux(),
    grpcParams.GrpcServerEndpoint(),
    grpcParams.GrpcClientOptions(),
  )
}
